exit
req
f
f = Rack::File.new(req.path)
f
File.read(f)
f = Rack::File.new(req.path)
Rack::File.new(req.path)
send_file
send
Rack::File.new(req.path).send
Rack::File.new(req.path).methods
Rack::File.new(req.path).read
Rack::File.new(req.path).to_io
Rack::File.new(req.path)
Rack::File.methods
Rack::File
exit
req.path
req
f
exit
Cuba.settings
c
exit
f.methods
f = Rack::File.new(req.path, {}, 'text/css')
f = Rack::File.new(req.path, {}, 'text/css'))
f = Rack::File.new(req.path)
f
f.read
f = Rack::File.new(req.path)
Rack::File.new
Rack::File.open
Rack::File.read
Rack::File.methods
Rack::File
exit
settings[:req].methods.each { |m| puts m }
settings[:req][:test]
settings[:req]
settings
Rack::Request.methods.grep(/config/)
Rack::Request.methods.grep(/options/)
Rack::Request.methods.grep(/settings/)
Rack::Request.methods
Rack::Request
settings
Cuba
req
exit
req.body
req
exit
exist
f.read
f = File.open('.' + req.path)
f = File.open(req.path)
req.path
req
Cuba.methods
Cuba.plugins
Cuba.settings
Rack::Static.methods
Rack::Static.settings.options
Rack::Static.settings
Rack::Static
settings
c
values
block
s 10
s
keys
s
h.keys
keys
s 10
s
options
template
s
options
s
file
s
eval_file
options
s
data
s
file
data
s
@data
s
steps
s
file
line
options
s
line
file
options
s
file
s
extensions
*extensions
s
name
s
Tilt::HamlTemplate
name
s
choices
s
@lazy_map.has_key? "haml"
@lazy_map
pattern
s 10
s10
s
lazy?(ext)
@template_map.has_key? ext.downcase
@template_map.has_key?
@template_map
s
pattern
s
split(file)
split)file)
s
options
file
s
self
s
options[:outvar]
options
file
s
template
s
template
ext
dir
s
s 10
exit
self
options.merge(outvar: '@_output')
@_output
template
s
template
ext
s
dir
s
template
locals
s
template
s
@settings
s
exit
template
layout
s
c
exit
content
exit
where
methods
whereami
next
exit
next
res
next
c
block
locals
next
